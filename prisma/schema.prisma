// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id               String    @id @unique @default(cuid())
    name             String?
    email            String?   @unique
    username         String    @unique @default(cuid())
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    bio              String    @default("This is my bio!")
    bioLinks         String[]
    isPrivateAccount Boolean   @default(false)
    createdAt        DateTime  @default(now())
    posts            Post[]
    followers        String[]
    followedUsers    String[]
    likedPosts       String[]
    pendingFollowers String[]
    pendingFollows   String[]

    @@index([id, username])
}

model Post {
    id          String   @id @default(cuid())
    body        String
    createdAt   DateTime @default(now())
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    likes       Int      @default(0)
    likedBy     String[]
    likedByIds  String[]

    @@index([body])
}
